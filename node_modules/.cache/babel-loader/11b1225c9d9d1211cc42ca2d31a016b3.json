{"ast":null,"code":"var _jsxFileName = \"/Users/dominikstein/Development/React-Projects/chore-door-generator-module/src/modules/DoorGame/doorGame.js\",\n    _s = $RefreshSig$();\n\nimport { render } from '@testing-library/react';\nimport React, { useEffect } from 'react';\nimport './doorGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DoorGame(props) {\n  _s();\n\n  useEffect(() => {\n    const renderDoors = props.doors;\n    renderDoors.map(door => {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        id: door.id,\n        className: \"door-frame\",\n        src: props.currentlyPlaying === false && door.open === false || props.currentlyPlaying === true && door.open === false ? door.closedDoor : door.src,\n        isOpen: door.open,\n        onClick: handleOnClick\n      }, door.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 20\n      }, this);\n    });\n  }, []);\n\n  const handleOnClick = event => {\n    openDoor(event);\n    props.checkForRobot(event.target.id);\n  };\n\n  const handleCheckForGameOver = () => {\n    props.checkIfGameOver();\n  };\n\n  const openDoor = event => {\n    let listOfDoors = props.doors;\n    let chosenDoor = listOfDoors.indexOf(listOfDoors.find(doorKey => doorKey.id === event.target.id));\n\n    if (listOfDoors[chosenDoor].open === false) {\n      props.openDoorLogic(event.target.id);\n    } else {\n      console.log('Error: Door is already opened');\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"door-row\",\n    children: renderDoors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DoorGame, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DoorGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoorGame\");","map":{"version":3,"sources":["/Users/dominikstein/Development/React-Projects/chore-door-generator-module/src/modules/DoorGame/doorGame.js"],"names":["render","React","useEffect","DoorGame","props","renderDoors","doors","map","door","id","currentlyPlaying","open","closedDoor","src","handleOnClick","event","openDoor","checkForRobot","target","handleCheckForGameOver","checkIfGameOver","listOfDoors","chosenDoor","indexOf","find","doorKey","openDoorLogic","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEpCF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMG,WAAW,GAAGD,KAAK,CAACE,KAA1B;AACAD,IAAAA,WAAW,CAACE,GAAZ,CAAgBC,IAAI,IAAI;AACpB,0BAAO;AAEP,QAAA,EAAE,EAAEA,IAAI,CAACC,EAFF;AAGP,QAAA,SAAS,EAAC,YAHH;AAIL,QAAA,GAAG,EAAGL,KAAK,CAACM,gBAAN,KAA2B,KAA3B,IAAoCF,IAAI,CAACG,IAAL,KAAc,KAAnD,IACAP,KAAK,CAACM,gBAAN,KAA2B,IAA3B,IAAmCF,IAAI,CAACG,IAAL,KAAc,KADjD,GAEDH,IAAI,CAACI,UAFJ,GAEiBJ,IAAI,CAACK,GANtB;AAOP,QAAA,MAAM,EAAEL,IAAI,CAACG,IAPN;AAQP,QAAA,OAAO,EAAEG;AARF,SACFN,IAAI,CAACC,EADH;AAAA;AAAA;AAAA;AAAA,cAAP;AASL,KAVC;AAWH,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMK,aAAa,GAAIC,KAAD,IAAW;AAC7BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAX,IAAAA,KAAK,CAACa,aAAN,CAAoBF,KAAK,CAACG,MAAN,CAAaT,EAAjC;AACH,GAHD;;AAKA,QAAMU,sBAAsB,GAAG,MAAM;AACjCf,IAAAA,KAAK,CAACgB,eAAN;AACH,GAFD;;AAIA,QAAMJ,QAAQ,GAAID,KAAD,IAAW;AACxB,QAAIM,WAAW,GAAGjB,KAAK,CAACE,KAAxB;AACA,QAAIgB,UAAU,GAAGD,WAAW,CAACE,OAAZ,CAAoBF,WAAW,CAACG,IAAZ,CAAiBC,OAAO,IAAKA,OAAO,CAAChB,EAAR,KAAeM,KAAK,CAACG,MAAN,CAAaT,EAAzD,CAApB,CAAjB;;AACA,QAAGY,WAAW,CAACC,UAAD,CAAX,CAAwBX,IAAxB,KAAiC,KAApC,EAA0C;AACtCP,MAAAA,KAAK,CAACsB,aAAN,CAAoBX,KAAK,CAACG,MAAN,CAAaT,EAAjC;AACH,KAFD,MAEO;AACHkB,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA;AACH;AACJ,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cACKvB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA1CuBF,Q;;KAAAA,Q","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { useEffect } from 'react';\nimport './doorGame.css';\n\nexport default function DoorGame(props) {\n\n    useEffect(() => {\n        const renderDoors = props.doors;\n        renderDoors.map(door => {\n            return <img\n            key={door.id}\n            id={door.id}\n            className=\"door-frame\"\n              src={(props.currentlyPlaying === false && door.open === false) || \n                  (props.currentlyPlaying === true && door.open === false) ? \n                  door.closedDoor : door.src}\n            isOpen={door.open} \n            onClick={handleOnClick} />\n      })\n    }, [])\n\n    const handleOnClick = (event) => {\n        openDoor(event);\n        props.checkForRobot(event.target.id);\n    }\n\n    const handleCheckForGameOver = () => {\n        props.checkIfGameOver();\n    }\n\n    const openDoor = (event) => {\n        let listOfDoors = props.doors;\n        let chosenDoor = listOfDoors.indexOf(listOfDoors.find(doorKey => (doorKey.id === event.target.id)));\n        if(listOfDoors[chosenDoor].open === false){\n            props.openDoorLogic(event.target.id);\n        } else {\n            console.log('Error: Door is already opened');\n            return;\n        }\n    }\n\n    return (\n        <div className=\"door-row\">\n            {renderDoors}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}