{"ast":null,"code":"var _jsxFileName = \"/Users/dominikstein/Development/React-Projects/chore-door-generator-module/src/modules/App/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from 'react';\nimport Navigation from '../Navigation/navigation';\nimport Score from '../Score/Score';\nimport DoorGame from '../DoorGame/doorGame';\nimport GameButton from '../GameButton/gameButton'; //Imports Pictures for rendering later\n\nimport closedDoor from \"./closed_door.svg\";\nimport robotDoor from \"./robot_door.svg\";\nimport beachDoor from \"./beach_door.svg\";\nimport spaceDoor from \"./space_door.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doorImage = {\n  closedDoor: closedDoor,\n  robot: robotDoor,\n  beach: beachDoor,\n  space: spaceDoor\n};\n\nfunction App() {\n  _s();\n\n  //Declare React States\n  const [numClosedDoors, setNumClosedDoors] = useState(0);\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(false);\n  const [doors, setDoors] = useState([{\n    id: 'door1',\n    src: '',\n    closedDoor: doorImage.closedDoor,\n    open: false\n  }, {\n    id: 'door2',\n    src: '',\n    closedDoor: doorImage.closedDoor,\n    open: false\n  }, {\n    id: 'door3',\n    src: '',\n    closedDoor: doorImage.closedDoor,\n    open: false\n  }]);\n  const [startButtonText, setStartButtonText] = useState(\"Spiel starten\");\n  const [wins, setWins] = useState(0);\n  const [losses, setLosses] = useState(0);\n\n  const handleGameConfigurations = () => {\n    resetGameSettings();\n    closeDoors();\n    randomChoreDoorGenerator();\n  };\n\n  const openDoor = door => {\n    if (currentlyPlaying === false) {\n      gameOver();\n    } else {\n      console.log(`Du hast ${door} geöffnet.`);\n      let listOfDoors = doors;\n      let index = listOfDoors.indexOf(listOfDoors.find(doorKey => doorKey.id === door));\n      listOfDoors[index].open = true;\n      reduceDoors();\n      setDoors(listOfDoors); //this.setState({doors: listOfDoors});\n    }\n  };\n\n  const checkForRobot = door => {\n    if (numClosedDoors === 1) {\n      gameOver('win');\n    } else {\n      let listOfDoors = doors;\n      let index = listOfDoors.indexOf(listOfDoors.find(doorKey => doorKey.id === door));\n\n      if (listOfDoors[index].src === doorImage.robot) {\n        console.log('Viel Spaß beim Putzen!');\n        gameOver();\n        setCurrentlyPlaying(false); //this.setState({currentlyPlaying: false});\n      }\n    }\n  };\n\n  const reduceDoors = () => {\n    setNumClosedDoors(prevNumOfDoors => prevNumOfDoors--); //this.setState({numClosedDoors: numOfDoors});\n  };\n\n  const randomChoreDoorGenerator = () => {\n    const randomDoorGenerator = Math.floor(Math.random() * 3);\n    let randomDoors = doors;\n\n    if (randomDoorGenerator === 0) {\n      randomDoors[0].src = doorImage.robot;\n      randomDoors[1].src = doorImage.beach;\n      randomDoors[2].src = doorImage.space;\n      setDoors({\n        doors: randomDoors\n      }); //this.setState({doors: randomDoors});\n    } else if (randomDoorGenerator === 1) {\n      randomDoors[0].src = doorImage.beach;\n      randomDoors[1].src = doorImage.robot;\n      randomDoors[2].src = doorImage.space;\n      setDoors({\n        doors: randomDoors\n      }); //this.setState({doors: randomDoors});\n    } else {\n      randomDoors[0].src = doorImage.space;\n      randomDoors[1].src = doorImage.beach;\n      randomDoors[2].src = doorImage.robot;\n      setDoors({\n        doors: randomDoors\n      }); //this.setState({doors: randomDoors});\n    }\n\n    console.log('Türen wurden generiert.');\n  };\n\n  const gameOver = status => {\n    if (status === 'win') {\n      countWins();\n      setCurrentlyPlaying(false);\n      setStartButtonText(\"Gewonnen! Erneut spielen?\");\n    } else {\n      countLosses();\n      setStartButtonText(\"Game Over! Erneut spielen?\");\n    }\n  };\n\n  const countWins = () => {\n    if (currentlyPlaying) {\n      setWins(prevWins => prevWins++);\n    } else {\n      return;\n    }\n  };\n\n  const countLosses = () => {\n    if (currentlyPlaying) {\n      setLosses(prevLosses => prevLosses++);\n    } else {\n      return;\n    }\n  };\n\n  const closeDoors = () => {\n    console.log('Alle Türen sind geschlossen.');\n    let listOfDoors = doors;\n    listOfDoors[0].open = false;\n    listOfDoors[1].open = false;\n    listOfDoors[2].open = false;\n    setDoors(listOfDoors); //this.setState({listOfDoors});\n  };\n\n  const resetGameSettings = () => {\n    console.log('GameSettings RESET is DONE'); //setState must be single StateCalls i guess\n\n    setState({\n      numClosedDoors: 3,\n      currentlyPlaying: true,\n      doors: [{\n        id: 'door1',\n        src: '',\n        closedDoor: doorImage.closedDoor\n      }, {\n        id: 'door2',\n        src: '',\n        closedDoor: doorImage.closedDoor\n      }, {\n        id: 'door3',\n        src: '',\n        closedDoor: doorImage.closedDoor\n      }],\n      startButtonText: 'Viel Glück!'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Score, {\n      winCount: wins,\n      lossCount: losses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DoorGame, {\n      doors: doors,\n      currentlyPlaying: currentlyPlaying,\n      openDoorLogic: openDoor,\n      checkIfGameOver: gameOver,\n      checkForRobot: checkForRobot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n      buttonText: startButtonText,\n      currentlyPlaying: currentlyPlaying,\n      startGame: handleGameConfigurations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ff1m1VSHENGZSjkcbFYARTYLJVI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dominikstein/Development/React-Projects/chore-door-generator-module/src/modules/App/App.js"],"names":["React","useState","Navigation","Score","DoorGame","GameButton","doorImage","closedDoor","robot","robotDoor","beach","beachDoor","space","spaceDoor","App","numClosedDoors","setNumClosedDoors","currentlyPlaying","setCurrentlyPlaying","doors","setDoors","id","src","open","startButtonText","setStartButtonText","wins","setWins","losses","setLosses","handleGameConfigurations","resetGameSettings","closeDoors","randomChoreDoorGenerator","openDoor","door","gameOver","console","log","listOfDoors","index","indexOf","find","doorKey","reduceDoors","checkForRobot","prevNumOfDoors","randomDoorGenerator","Math","floor","random","randomDoors","status","countWins","countLosses","prevWins","prevLosses","setState"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\nimport Navigation from '../Navigation/navigation';\nimport Score from '../Score/Score';\nimport DoorGame from '../DoorGame/doorGame';\nimport GameButton from '../GameButton/gameButton';\n\n//Imports Pictures for rendering later\nimport closedDoor from './closed_door.svg';\nimport robotDoor from './robot_door.svg';\nimport beachDoor from './beach_door.svg';\nimport spaceDoor from './space_door.svg';\n\nconst doorImage = {\n    closedDoor: closedDoor,\n    robot: robotDoor,\n    beach: beachDoor,\n    space: spaceDoor\n};\n\n\nfunction App() {\n\n  //Declare React States\n  const [ numClosedDoors, setNumClosedDoors ] = useState(0);\n  const [ currentlyPlaying, setCurrentlyPlaying ] = useState(false);\n  const [ doors, setDoors ] = useState(\n    [\n      {id: 'door1', src: '', closedDoor: doorImage.closedDoor, open: false},\n      {id: 'door2', src: '', closedDoor: doorImage.closedDoor, open: false},\n      {id: 'door3', src: '', closedDoor: doorImage.closedDoor, open: false}\n    ]);\n    const [ startButtonText, setStartButtonText ] = useState(\"Spiel starten\");\n    const [ wins, setWins ] = useState(0);\n    const [ losses, setLosses ] = useState(0);\n\n    const handleGameConfigurations = () => {\n      resetGameSettings();\n      closeDoors();\n      randomChoreDoorGenerator();\n    }\n\n    const openDoor = (door) => {\n      if (currentlyPlaying === false){\n        gameOver();\n      } else {\n        console.log(`Du hast ${door} geöffnet.`);\n        let listOfDoors = doors;\n        let index = listOfDoors.indexOf(listOfDoors.find(doorKey => (doorKey.id === door)));\n        listOfDoors[index].open = true;\n        reduceDoors();\n        setDoors(listOfDoors);\n        //this.setState({doors: listOfDoors});\n      }\n    }\n\n    const checkForRobot = (door) => {\n      if(numClosedDoors === 1){\n        gameOver('win');\n      } else {\n        let listOfDoors = doors;\n        let index = listOfDoors.indexOf(listOfDoors.find(doorKey => (doorKey.id === door)));\n        if(listOfDoors[index].src === doorImage.robot){\n          console.log('Viel Spaß beim Putzen!');\n          gameOver();\n          setCurrentlyPlaying(false);\n          //this.setState({currentlyPlaying: false});\n        }\n      }\n    }\n\n    const reduceDoors = () => {\n      setNumClosedDoors(prevNumOfDoors => prevNumOfDoors--);\n      //this.setState({numClosedDoors: numOfDoors});\n    }\n\n    const randomChoreDoorGenerator = () => {\n      const randomDoorGenerator = Math.floor(Math.random() * 3);\n      let randomDoors = doors;\n      if (randomDoorGenerator === 0) {\n        randomDoors[0].src = doorImage.robot;\n        randomDoors[1].src = doorImage.beach;\n        randomDoors[2].src = doorImage.space;\n        setDoors({doors: randomDoors});\n        //this.setState({doors: randomDoors});\n      } else if (randomDoorGenerator === 1) {\n        randomDoors[0].src = doorImage.beach;\n        randomDoors[1].src = doorImage.robot;\n        randomDoors[2].src = doorImage.space;\n        setDoors({doors: randomDoors});\n        //this.setState({doors: randomDoors});\n    } else {\n        randomDoors[0].src = doorImage.space;\n        randomDoors[1].src = doorImage.beach;\n        randomDoors[2].src = doorImage.robot;\n        setDoors({doors: randomDoors});\n        //this.setState({doors: randomDoors});\n    }\n    console.log('Türen wurden generiert.')\n  }\n\n  const gameOver = (status) => {\n    if (status === 'win') {\n      countWins();\n      setCurrentlyPlaying(false);\n      setStartButtonText(\"Gewonnen! Erneut spielen?\");\n    } else {\n      countLosses();\n      setStartButtonText(\"Game Over! Erneut spielen?\")\n    }\n  }\n\n  const countWins = () => {\n    if(currentlyPlaying){\n      setWins(prevWins => prevWins++);\n    } else {\n      return;\n    }\n  }\n\n  const countLosses = () => {\n    if(currentlyPlaying){ \n      setLosses(prevLosses => prevLosses++);\n    } else {\n      return;\n    }\n  }\n\n  const closeDoors = () => {\n    console.log('Alle Türen sind geschlossen.');\n    let listOfDoors = doors;\n    listOfDoors[0].open = false;\n    listOfDoors[1].open = false;\n    listOfDoors[2].open = false;\n    setDoors(listOfDoors);\n    //this.setState({listOfDoors});\n  }\n\n  const resetGameSettings = () => {\n    console.log('GameSettings RESET is DONE');\n    //setState must be single StateCalls i guess\n    setState({\n      numClosedDoors: 3,\n      currentlyPlaying: true,\n      doors: [\n        {id: 'door1', src: '', closedDoor: doorImage.closedDoor},\n        {id: 'door2', src: '', closedDoor: doorImage.closedDoor},\n        {id: 'door3', src: '', closedDoor: doorImage.closedDoor}\n      ],\n      startButtonText: 'Viel Glück!'\n  });\n  }\n\n  return (\n    <div>\n      <Navigation />\n      <Score winCount={wins} lossCount={losses}/>\n      <DoorGame\n        doors={doors}\n        currentlyPlaying={currentlyPlaying}\n        openDoorLogic={openDoor}\n        checkIfGameOver={gameOver}\n        checkForRobot={checkForRobot}/>\n      <GameButton\n        buttonText={startButtonText}\n        currentlyPlaying={currentlyPlaying}\n        startGame={handleGameConfigurations} />\n    </div>\n  );\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}